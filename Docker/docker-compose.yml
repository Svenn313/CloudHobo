services:
##NGINX##
  nginx:
    build:
     dockerfile: ./nginx/Dockerfile.nginx
    container_name: CHnginx
    hostname: chnginx
    entrypoint: nginx -g "daemon off;"
    ports:
     - 8080:8080
    restart: unless-stopped
    network_mode: host
##VAULTWARDEN##
  vaultwarden:
    image: vaultwarden/server
    container_name: CHvaultwarden
    hostname: chvaultwarden
    volumes:
    - type: bind
      source: ./Vaultwarden/Volumes
      target: /data
    ports:
    - 8540:80
    networks:
      - apps
##SYNCTHING##
  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: CHsyncthing
    hostname: chsyncthing
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - type: bind
        source: ./Syncthing/Volumes
        target: /config
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped
    networks:
      - apps
##PAPERLESS##
  broker:
    image: docker.io/library/redis:7
    container_name: CHredis
    hostname: chredis
    restart: unless-stopped
    volumes:
      - redisdata:/data
  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: CHpaperless
    hostname: chpaperless
    restart: unless-stopped
    depends_on:
      - broker
    ports:
      - "8211:8000"
    volumes:
    - ./PaperlessNGX/Volumes/data:/usr/src/paperless/data
    - ./PaperlessNGX/Volumes/media:/usr/src/paperless/media
    - ./PaperlessNGX/Volumes/export:/usr/src/paperless/export
    - ./PaperlessNGX/Volumes/consume:/usr/src/paperless/consume
    env_file: ./PaperlessNGX/docker-compose.env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
    networks:
      - apps
##LINKDING##
  linkding:
    image: sissbruecker/linkding
    container_name: CHlinkding
    hostname: chlinkding
    volumes:
      - type: bind
        source: ./Linkding/Volumes
        target: /config
    ports:
      - 8566:9090
    env_file:
      - ./Linkding/secrets.env
    networks:
      - apps
##PORTAINER##
  portainer-ce:
    image: portainer/portainer-ce
    container_name: CHportainer
    hostname: chportainer
    ports:
      - 9443:9443
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./Portainer/Volumes/data:/data
    restart: always
    networks:
      - monitoring
##GRAFANA##
  grafana:
    build:
      dockerfile: ./Grafana/Dockerfile.grafana
    hostname: chgrafana
    container_name: CHgrafana
    restart: unless-stopped
    user: '0'
    ports:
      - '3000:3000'
    volumes:
      - './Grafana/Volumes:/var/lib/grafana'
    networks:
      - monitoring
##PROMETHEUS##
  prometheus:
    image: prom/prometheus
    hostname: chprometheus
    container_name: CHprometheus
    ports:
      - 9090:9090
    volumes:
      - ./Prometheus/Config/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - monitoring

##MISC##
volumes:
  data:
  media:
  redisdata:
networks:
  monitoring:
    driver: bridge
  apps:
    driver: bridge
  
