services:
##VAULTWARDEN##
  vaultwarden:
    image: vaultwarden/server
    container_name: CHvaultwarden
    hostname: chvaultwarden
    volumes:
    - type: bind
      source: ./Vaultwarden/Volumes
      target: /data
    ports:
    - 8540:8080
    networks:
      - apps

##SYNCTHING##
  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    container_name: CHsyncthing
    hostname: chsyncthing
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=Etc/UTC
    volumes:
      - type: bind
        source: ./Syncthing/Volumes
        target: /config
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped
    networks:
      - apps

##LINKDING##
  linkding:
    image: sissbruecker/linkding
    container_name: CHlinkding
    hostname: chlinkding
    volumes:
      - type: bind
        source: ./Linkding/Volumes
        target: /config
    ports:
      - 8566:9090
    env_file:
      - ./Linkding/secrets.env
    networks:
      - apps

##PROMETHEUS##
  prometheus:
    image: prom/prometheus:latest
    container_name: CHprometheus
    hostname: chprometheus
    ports:
    - 9090:9090
    command:
    - --config.file=/etc/prometheus/prometheus.yml
    volumes:
    - ./Prometheus/Config/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
    - cadvisor
    networks:
      - monitoring

##CADVISOR##
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: CHcadvisor
    hostname: chcadvisor
    ports:
    - 8080:8080
    volumes:
    - /:/rootfs:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
  
  ##PORTAINER##
  portainer:
    image: portainer/portainer-ce
    container_name: CHportainer
    hostname: chportainer
    ports:
      - 9443:9443
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./Portainer/Volumes/data:/data
    restart: always
    networks:
      - monitoring

##GRAFANA##
  grafana:
    build:
      dockerfile: ./Grafana/Dockerfile.grafana
    hostname: chgrafana
    container_name: CHgrafana
    restart: unless-stopped
    user: '0'
    ports:
      - '3000:3000'
    volumes:
      - './Grafana/Volumes:/var/lib/grafana'
    networks:
      - monitoring

##MISC##
networks:
  monitoring:
    driver: bridge
  apps:
    driver: bridge