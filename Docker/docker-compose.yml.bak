services:
##VAULTWARDEN##
  vaultwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden_CH
    restart: unless-stopped
    environment:
      - DOMAIN=https://vaultwarden.${DOMAIN_NAME}
      - ROCKET_TLS={certs="/ssl/certs.pem",key="/ssl/privkey.pem"}
      - ADMIN_TOKEN=${VAULTWARDEN_ADMIN_TOKEN}
    volumes:
      - './Vaultwarden/Volumes:/data'
      - '${SSL_FULLCHAIN_PATH}:/ssl/certs.pem:ro'
      - '${SSL_KEY_PATH}:/ssl/privkey.pem:ro'
    ports:
      - 6010:80
    networks:
      - apps

##HEDGEDOC##
  hedgedoc:
    image: quay.io/hedgedoc/hedgedoc:latest
    container_name: hedge_CH
    restart: unless-stopped
    environment:
      - CMD_DOMAIN=hedge.${DOMAIN_NAME}
      - CMD_URL_ADDPORT=false
      - CMD_PORT=3000
      - CMD_PROTOCOL_USESSL=true
      - CMD_DB_DIALECT=postgres
      - CMD_DB_URL=postgres://${HD_DATABASE_NAME}:${HD_DATABASE_PASS}@${HOST_URL}:5432/hedgedoc
      - CMD_DB_HOST=${HOST_URL}
      - CMD_DB_DATABASE=${HD_DATABASE_NAME}
      - CMD_DB_PORT=5432
      - CMD_DB_USER=${HD_DATABASE_USER}
      - CMD_DB_PASS=${HD_DATABASE_PASS}
    volumes:
      - './Hedgedoc/Volumes:/hedgedoc/public/uploads'
    ports:
      - "6020:3000"
    depends_on:
      - postgres
    networks:
       - apps

##POSTGRES##
  postgres:
    image: postgres:13.4-alpine
    container_name: postgres_CH
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASS}
      - POSTGRES_DB=hedgedoc
    volumes:
      - './Postgres/Volumes:/var/lib/postgresql/data'
    ports:
      - 5432:5432
    networks:
       - apps

##MEALIE##
  mealie:
    image: ghcr.io/mealie-recipes/mealie:latest
    container_name: mealie_CH
    restart: unless-stopped
    ports:
      - 6030:9000
    deploy:
      resources:
        limits:
          memory: 1000M
    volumes:
      - './Mealie/Volumes:/app/data/'
      - '${SSL_CERT_PATH}:/app/ssl/cert.pem'
      - '${SSL_KEY_PATH}:/app/ssl/key.pem'
    environment:
      ALLOW_SIGNUP: "false"
      PUID: 1000
      PGID: 1000
      TLS_CERTIFICATE_PATH: /app/ssl/cert.pem
      TLS_PRIVATE_KEY_PATH: /app/ssl/key.pem
      TZ: Europe/Paris
      BASE_URL: https://mealie.{DOMAIN_NAME}
    networks:
      - apps

##PORTAINER##
  portainer:
   image: portainer/portainer-ce:latest
   container_name: portainer_CH
   restart: unless-stopped
   ports:
     - 6040:9443
     - 6041:9000
   volumes:
     - '/var/run/docker.sock:/var/run/docker.sock'
     - './Portainer/Volumes/data:/data'
   networks:
     - apps

##HEIMDALL##
  heimdall:
   image: lscr.io/linuxserver/heimdall:latest
   container_name: heimdall_CH
   restart: unless-stopped
   environment:
     - PUID=1000
     - PGID=1000
     - TZ=Europe/Paris
   volumes:
     - './Heimdall/Volumes/Config:/config'
     - '${SSL_CERT_PATH}:/config/keys/cert.pem'
     - '${SSL_KEY_PATH}:/config/keys/key.pem'
   ports:
     - 6050:443
     - 6051:80
   networks:
     - apps

##PROMETHEUS##
  prometheus:
   image: prom/prometheus:latest
   container_name: prometheus_CH
   restart: unless-stopped
   ports:
     - 7010:9090
   command:
     - --config.file=/etc/prometheus/prometheus.yml
     - --web.config.file=/etc/prometheus/web.yml
   volumes:
     - './Prometheus/Config/prometheus.yml:/etc/prometheus/prometheus.yml'
     - './Prometheus/Config/web.yml:/etc/prometheus/web.yml'
     - '${SSL_CERT_PATH}:/app/ssl/cert.pem'
     - '${SSL_KEY_PATH}:/app/ssl/key.pem'
   depends_on:
     - cadvisor
   networks:
     - monitoring

##CADVISOR##
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor_CH
    restart: unless-stopped
    ports:
      - 7020:8080
    volumes:
    - /:/rootfs:ro
    - /var/run/docker.sock:/var/run/docker.sock:ro
    - /var/run:/var/run:rw
    - /sys:/sys:ro
    - /var/lib/docker:/var/lib/docker:ro
    - /sys/fs/cgroup:/cgroup:ro
    - /dev/disk/:/dev/disk:ro
    command:
    - '-housekeeping_interval=10s'
    - '-docker_only=true'
    networks:
    - monitoring

##GRAFANA##
  grafana:
    image : grafana/grafana-enterprise:latest
    container_name: grafana_CH
    environment:
    - GF_SERVER_PROTOCOL=https
    - GF_SERVER_CERT_FILE=/app/ssl/cert.pem
    - GF_SERVER_CERT_KEY=/app/ssl/key.pem
    - GF_SECURITY_ADMIN_USER=admin
    - GF_SECURITY_ADMIN_PASSWORD=${GRAF_ADMIN_PASSWORD}
    restart: unless-stopped
    user: '0'
    ports:
    - 7030:3000
    volumes:
    - './Grafana/Volumes:/var/lib/grafana'
    - '${SSL_CERT_PATH}:/app/ssl/cert.pem'
    - '${SSL_KEY_PATH}:/app/ssl/key.pem'
    networks:
    - monitoring

##PI-HOLE##
  pihole:
    image: pihole/pihole:latest
    container_name: pihole_CH
    restart: unless-stopped
    ports:
    - 7040:443/tcp
    - 7041:80/tcp
    - 7042:53/tcp
    - 7043:53/udp
  # - 7044:67/udp # DHCP
    environment:
    TZ: 'Europe/Paris'
    FTLCONF_webserver_api_password: ${PIHOLE_API_PASSWORD}
    WEBPASSWORD: ${PIHOLE_WEB_PASSWORD}
    volumes:
    - './Pi-hole/Volumes:/etc/pihole'
    networks:
    - monitoring

##WIREGUARD##
  wg-easy:
    image: ghcr.io/wg-easy/wg-easy:latest
    container_name: wgeasy_CH
    restart: unless-stopped
    environment:
    - LANG=en
    - WG_HOST=${DOMAIN_NAME}
    - WG_PORT=51820
    - WG_DEFAULT_ADDRESS=10.8.0.x
    - WG_DEFAULT_DNS=8.8.8.8
    - PASSWORD_HASH=${WG_PASS_HASH}
    volumes:
    - ./Wireguard/Volumes:/etc/wireguard
    - /etc/letsencrypt/:/etc/letsencrypt/
    ports:
    - 7051:51820/udp
    - 7050:51821/tcp
    cap_add:
    - NET_ADMIN
    - SYS_MODULE
    sysctls:
    - net.ipv4.ip_forward=1
    - net.ipv4.conf.all.src_valid_mark=1
    healthcheck:
      test: /usr/bin/timeout 5s /bin/sh -c "/usr/bin/wg show | /bin/grep -q interface || exit 1"
      interval: 1m
      timeout: 5s
      retries: 3

##MISC##
networks:
  monitoring:
    driver: bridge
  apps:
    driver: bridge
